# --------------------------------------------------------------------------------
# ---  Quick start
# --------------------------------------------------------------------------------
- Install make (search the web)
  For windows: http://gnuwin32.sourceforge.net/downlinks/make.php
  For linux  : apt-get install make   (or the like)

- Open a command window from the current directory
  For windows: you can choose to double click on one of the open-cmd*.bat files provided

- Simply type "make" and press Enter. The dlls should compile and be placed in a folder "_lib*"
  The makefile detects whether intel fortran or gfortran is present and uses the first one it finds.
  If it doesnt work, or if you want more info about how to setup your compiler, read the following.

# --------------------------------------------------------------------------------
# ---  General information
# --------------------------------------------------------------------------------
The current directory and the sub-directories contain Makefiles.
The makefile in the current directory simply loops over the sub-directories and run make in these directories using the same rule as the one it was called with. 
All Makefiles contain the rules "all", "clean", "purge" and "flags". 
The Makefile in the current directory also contain the rules "batch", "def" and "headers"
The Makefiles include common Makefile code placed in the directory "_mkf". 
The files from the "_mkf" directory comes from: https://github.com/elmanuelito/_mkf.git

# --------------------------------------------------------------------------------
# --- Makefile rules 
# --------------------------------------------------------------------------------
all: default rule, triggers the compilation (creates a _build* folder)

clean: remove objects, modules files and build folders

purge: remove the libraries and dlls

flags: displays the flags and compiler used for compilation

For the Makefile in the current directory,
batch: performs compilation for several compilers and/or release/debug version

(advanced) The rules below require the simple-fortran-parser tool from https://github.com/elmanuelito/simple-fortran-parser.git.
def: (advanded) automatically generate the ".def" file containing the dll export definitions 

headers: (advanded) automatically generate the ".h" file containing the headers for the dll

# --------------------------------------------------------------------------------
# --- Main Makefile options  / redefining Makefile variables
# --------------------------------------------------------------------------------
- Choice of Fortran Compiler
  By default the compiler looks for the intel fortran compiler (ifort) or the gnu fortran compiler (gfortran). Intel has the priority. This step is performed in the included file "_mkf/MakefileDllInit".
  The choice of compiler can be overriden by adding FCOMPILER=... to the makefile call. 
  The different compilers are defined in "_mkf/MakefileFortran.mk" where the following convention is used:
  FCOMPILER=0 : gfortran 
  FCOMPILER=1 : ifort
  FCOMPILER=2 : sun
  FCOMPILER=3 : compaq
  For instance, if both intel and gfortran are present, the compilation using gfortran can be forced by typing "make FCOMPILER=0"

- Release vs Debug 
  The Makefile compiles a release version by default. To compile debug versions simply type "make RELEASE=0"

- Choice of Target architecture
The target architecure is automatically detected based on the compiler (using for instance the "--version" flags of a compiler) and stored in the Makefile variable "FC_ARCHI". These detections are handled by the files "_mkf/MakefileFortran_*_Checks.mk".  The target architecture can be different than the OS architecture, detected by "_mkf/MakefileOS.mk" and stored in "OS_ARCHI". To setup intel compiler for different architecture see the next section.
  
# --------------------------------------------------------------------------------
# --- Setting up your environment such that your compilers are accessible
# --------------------------------------------------------------------------------
- Generalities: The commands available within a command line correponds to binaries located in the different folders defined in the environment variable "PATH" ("echo $PATH ", or "echo %PATH%")
  If you type a command and get a "command not found" message it needs you need to setup your PATH to access this command. 
  To have the compiler available you will have to setup your PATH.
  For windows users, the free software Eveditor is convenient to edit the environment variable like PATH.
  Remember that after setting your PATH, you need to open a new terminal window.

- make:  Usually make is available since its "bin" folder is added to the PATH at install. Otherwise find it and add-it. 

- gfortran: Usually gfortran is available since its "bin" folder is added to the PATH at install. Otherwise find it and add-it. 

- Intel: The ifort compiler comes with tools to automatically setup your PATH. This tool is called "ifortvars.bat" or "compilervars.bat". Look for the folder containing this tool  (For example:"C:\Program Files (x86)\Intel\Composer\bin" or /opt/intel/composer/bin). Add this folder to your PATH (or run the script in your current terminal).
  - For linux users running "ifortvars.bat intel64" should make the "ifort" command available in your current terminal session. The basic C-compilation tools (gcc ld) are likely present on your system.
  - For windows users, the basic C-compilation tools are not available by default. You can use the one from Visual Studio (2010 here assumed). Like Intel, Visual Studio comes with a bat script to configure the path. This script is called "vcvars.bat" (e.g. "C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC"). Find it, and add the containing folder to your PATH.
To setup intel fortran you need to first setup the C visual studio toolkit. The commands are as follows for 32bit and 64 bit respectively (assuming the two bat scripts above are in your path and available).
  vcvarsall.bat x86
  ifortvars.bat ia32 vs2010

  vcvarsall.bat amd64
  ifortvars.bat intel64 vs2010

  For convenience, the open-cmd*.bat are shipped with the current repository to automatically performs these commands in a terminal sessin.

